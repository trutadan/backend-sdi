# Generated by Django 4.1.7 on 2023-06-03 11:30

from django.conf import settings
import django.contrib.auth.models
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('first_name', models.CharField(db_column='first_name', max_length=20)),
                ('last_name', models.CharField(db_column='last_name', max_length=20)),
                ('email', models.EmailField(db_column='email', max_length=254, unique=True)),
                ('username', models.CharField(db_column='username', db_index=True, max_length=50, unique=True)),
                ('password', models.CharField(db_column='password', max_length=100)),
                ('is_active', models.BooleanField(db_column='is_active', default=False)),
                ('confirmation_code', models.CharField(blank=True, max_length=50, null=True, unique=True)),
                ('confirmation_code_expiration', models.DateTimeField(blank=True, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True, db_column='created_at')),
                ('role', models.CharField(blank=True, choices=[('ADMIN', 'Admin'), ('MODERATOR', 'Moderator'), ('REGULAR', 'Regular')], db_column='role', max_length=50, null=True)),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='Cart',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, db_column='created_at')),
                ('user', models.OneToOneField(db_column='user', on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='Coupon',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('code', models.CharField(db_column='code', max_length=15)),
                ('amount', models.FloatField(db_column='amount')),
            ],
        ),
        migrations.CreateModel(
            name='Item',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(db_column='title', max_length=100)),
                ('price', models.FloatField(db_column='price')),
                ('discount_price', models.FloatField(blank=True, db_column='discount_price', null=True)),
                ('available_number', models.PositiveIntegerField(db_column='available_number')),
                ('total_number', models.PositiveIntegerField(db_column='total_number')),
                ('description', models.TextField(db_column='description')),
                ('picture', models.ImageField(blank=True, db_column='picture', null=True, upload_to='')),
            ],
        ),
        migrations.CreateModel(
            name='Order',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('order_placed_date', models.DateTimeField(auto_now_add=True, db_column='order_placed_date')),
                ('received_date', models.DateTimeField(blank=True, db_column='received_date', null=True)),
                ('being_delivered', models.BooleanField(db_column='delivered_status', default=False)),
                ('received', models.BooleanField(db_column='received', default=False)),
                ('refund_requested', models.BooleanField(db_column='refund_requested', default=False)),
                ('refund_granted', models.BooleanField(db_column='refund_granted', default=False)),
            ],
        ),
        migrations.CreateModel(
            name='OrderAddress',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('country', models.CharField(db_column='country', default='Romania', max_length=25)),
                ('state', models.CharField(db_column='state', max_length=25)),
                ('city', models.CharField(db_column='city', max_length=25)),
                ('street', models.CharField(db_column='street', max_length=25)),
                ('apartment', models.CharField(blank=True, db_column='apartment', max_length=25, null=True)),
                ('zip_code', models.CharField(db_column='zip_code', max_length=10)),
            ],
        ),
        migrations.CreateModel(
            name='UserAddress',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('street', models.TextField(db_column='street')),
                ('city', models.CharField(db_column='city', max_length=25)),
                ('state', models.CharField(db_column='state', max_length=25)),
                ('country', models.CharField(db_column='country', default='Romania', max_length=25)),
                ('zip_code', models.CharField(db_column='zip_code', max_length=10)),
            ],
        ),
        migrations.CreateModel(
            name='UserProfile',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('picture', models.ImageField(blank=True, db_column='profile_picture', null=True, upload_to='')),
                ('date_of_birth', models.DateField(db_column='date_of_birth')),
                ('phone', models.CharField(db_column='phone_number', max_length=10)),
                ('country_code', models.CharField(db_column='country_code', default='+40', max_length=5)),
                ('created_at', models.DateTimeField(auto_now=True, db_column='created_at')),
                ('updated_at', models.DateTimeField(auto_now=True, db_column='updated_at')),
            ],
        ),
        migrations.CreateModel(
            name='Refund',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('reason', models.TextField(db_column='reason')),
                ('accepted', models.BooleanField(db_column='status', default=False)),
                ('order', models.OneToOneField(blank=True, db_column='order_number', null=True, on_delete=django.db.models.deletion.CASCADE, to='api.order')),
            ],
        ),
        migrations.CreateModel(
            name='Payment',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('timestamp', models.DateTimeField(auto_now_add=True, db_column='timestamp')),
                ('amount', models.DecimalField(blank=True, decimal_places=2, editable=False, max_digits=10, null=True)),
                ('order', models.OneToOneField(db_column='order_number', on_delete=django.db.models.deletion.CASCADE, to='api.order')),
            ],
        ),
        migrations.CreateModel(
            name='OrderItem',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('quantity', models.PositiveIntegerField(db_column='quantity', default=1)),
                ('item', models.ForeignKey(db_column='item', on_delete=django.db.models.deletion.CASCADE, related_name='item_orders', to='api.item')),
                ('order', models.ForeignKey(db_column='order_number', on_delete=django.db.models.deletion.CASCADE, related_name='order_items', to='api.order')),
            ],
        ),
        migrations.AddField(
            model_name='order',
            name='billing_address',
            field=models.ForeignKey(blank=True, db_column='billing_address', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='billing_address', to='api.orderaddress'),
        ),
        migrations.AddField(
            model_name='order',
            name='coupon',
            field=models.ForeignKey(blank=True, db_column='coupon', null=True, on_delete=django.db.models.deletion.SET_NULL, to='api.coupon'),
        ),
        migrations.AddField(
            model_name='order',
            name='shipping_address',
            field=models.ForeignKey(blank=True, db_column='shipping_address', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='shipping_address', to='api.orderaddress'),
        ),
        migrations.AddField(
            model_name='order',
            name='user',
            field=models.ForeignKey(db_column='user', on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL),
        ),
        migrations.CreateModel(
            name='ItemCategory',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(db_column='name', db_index=True, max_length=30)),
                ('subcategory', models.CharField(blank=True, db_column='subcategory', max_length=30, null=True)),
            ],
            options={
                'unique_together': {('name', 'subcategory')},
            },
        ),
        migrations.AddField(
            model_name='item',
            name='category',
            field=models.ForeignKey(db_column='category', on_delete=django.db.models.deletion.CASCADE, to='api.itemcategory'),
        ),
        migrations.CreateModel(
            name='CartItem',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('quantity', models.PositiveIntegerField(db_column='quantity', default=1)),
                ('cart', models.ForeignKey(db_column='cart', on_delete=django.db.models.deletion.CASCADE, related_name='cart_items', to='api.cart')),
                ('item', models.ForeignKey(db_column='item', on_delete=django.db.models.deletion.CASCADE, related_name='item_carts', to='api.item')),
            ],
        ),
        migrations.AddField(
            model_name='user',
            name='address',
            field=models.OneToOneField(blank=True, db_column='address', null=True, on_delete=django.db.models.deletion.SET_NULL, to='api.useraddress'),
        ),
        migrations.AddField(
            model_name='user',
            name='groups',
            field=models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups'),
        ),
        migrations.AddField(
            model_name='user',
            name='profile',
            field=models.OneToOneField(blank=True, db_column='profile', null=True, on_delete=django.db.models.deletion.SET_NULL, to='api.userprofile'),
        ),
        migrations.AddField(
            model_name='user',
            name='user_permissions',
            field=models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions'),
        ),
    ]
